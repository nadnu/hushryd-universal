// Prisma Schema for HushRyd
// Modern ORM for TypeScript/JavaScript

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  driver
  customer
  passenger
}

enum UserStatus {
  active
  suspended
  pending
  banned
}

enum VehicleType {
  sedan
  suv
  van
  luxury
  economy
  bus
}

enum VehicleStatus {
  active
  inactive
  pending_verification
  rejected
}

enum RideType {
  carpool
  bus
  private
}

enum RideStatus {
  scheduled
  active
  completed
  cancelled
  no_show
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  completed
  no_show
  refunded
}

enum PaymentStatus {
  pending
  paid
  refunded
  failed
}

enum TransactionType {
  booking
  refund
  payout
  cancellation_fee
  platform_fee
}

enum TransactionStatus {
  pending
  processing
  completed
  failed
  reversed
}

enum ReviewType {
  driver_review
  passenger_review
  ride_review
}

enum DocumentType {
  drivers_license
  vehicle_registration
  insurance
  id_card
  selfie
  other
}

enum DocumentStatus {
  pending
  approved
  rejected
  expired
}

enum NotificationType {
  booking
  cancellation
  review
  payment
  verification
  ride_reminder
  system
}

enum NotificationPriority {
  low
  medium
  high
  urgent
}

enum AdminRole {
  superadmin
  finance
  support
}

enum AdminStatus {
  active
  inactive
  suspended
}

model User {
  id                      String    @id @default(uuid())
  email                   String    @unique
  phone                   String    @unique
  passwordHash            String    @map("password_hash")
  name                    String
  role                    UserRole
  status                  UserStatus @default(active)
  avatarUrl               String?   @map("avatar_url")
  bio                     String?
  dateOfBirth             DateTime? @map("date_of_birth") @db.Date
  
  // Driver & Customer specific
  licenseNumber           String?   @unique @map("license_number")
  licenseExpiry           DateTime? @map("license_expiry") @db.Date
  licenseVerified         Boolean   @default(false) @map("license_verified")
  
  // Address
  addressLine1            String?   @map("address_line1")
  addressLine2            String?   @map("address_line2")
  city                    String?
  state                   String?
  postalCode              String?   @map("postal_code")
  country                 String    @default("United Kingdom")
  
  // Emergency contact
  emergencyContactName    String?   @map("emergency_contact_name")
  emergencyContactPhone   String?   @map("emergency_contact_phone")
  
  // Stats
  rating                  Decimal   @default(0) @db.Decimal(3,2)
  reviewCount             Int       @default(0) @map("review_count")
  totalRides              Int       @default(0) @map("total_rides")
  completedRides          Int       @default(0) @map("completed_rides")
  cancelledRides          Int       @default(0) @map("cancelled_rides")
  
  // Settings
  emailVerified           Boolean   @default(false) @map("email_verified")
  phoneVerified           Boolean   @default(false) @map("phone_verified")
  isVerified              Boolean   @default(false) @map("is_verified")
  pushNotifications       Boolean   @default(true) @map("push_notifications")
  emailNotifications      Boolean   @default(true) @map("email_notifications")
  
  // Timestamps
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  lastLoginAt             DateTime? @map("last_login_at")
  deletedAt               DateTime? @map("deleted_at")
  
  // Relations
  vehicles                Vehicle[]
  ridesPublished          Ride[]    @relation("PublishedRides")
  bookings                Booking[]
  reviewsGiven            Review[]  @relation("ReviewsGiven")
  reviewsReceived         Review[]  @relation("ReviewsReceived")
  transactionsFrom        Transaction[] @relation("TransactionsFrom")
  transactionsTo          Transaction[] @relation("TransactionsTo")
  notifications           Notification[]
  documents               VerificationDocument[]
  favoriteRoutes          FavoriteRoute[]
  blockedUsers            BlockedUser[] @relation("BlockingUser")
  blockedBy               BlockedUser[] @relation("BlockedUser")
  conversationsAsParticipant1 Conversation[] @relation("Participant1")
  conversationsAsParticipant2 Conversation[] @relation("Participant2")
  messagesSent            Message[]
  auditLogs               AuditLog[]
  
  @@map("users")
}

model Vehicle {
  id                    String        @id @default(uuid())
  ownerId               String        @map("owner_id")
  owner                 User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Basic Info
  make                  String
  model                 String
  year                  Int
  color                 String
  licensePlate          String        @unique @map("license_plate")
  vin                   String?       @unique
  
  // Specifications
  vehicleType           VehicleType   @map("vehicle_type")
  seatingCapacity       Int           @map("seating_capacity")
  fuelType              String?       @map("fuel_type")
  transmission          String?
  
  // Documents
  registrationNumber    String        @map("registration_number")
  registrationExpiry    DateTime      @map("registration_expiry") @db.Date
  insuranceNumber       String        @map("insurance_number")
  insuranceExpiry       DateTime      @map("insurance_expiry") @db.Date
  insuranceProvider     String?       @map("insurance_provider")
  
  // Photos
  photoFront            String?       @map("photo_front")
  photoBack             String?       @map("photo_back")
  photoLeft             String?       @map("photo_left")
  photoRight            String?       @map("photo_right")
  photoInterior         String?       @map("photo_interior")
  
  // Verification
  status                VehicleStatus @default(pending_verification)
  verifiedAt            DateTime?     @map("verified_at")
  verifiedBy            String?       @map("verified_by")
  rejectionReason       String?       @map("rejection_reason")
  
  // Stats
  totalRides            Int           @default(0) @map("total_rides")
  totalDistanceKm       Decimal       @default(0) @db.Decimal(10,2) @map("total_distance_km")
  
  // Timestamps
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  deletedAt             DateTime?     @map("deleted_at")
  
  // Relations
  rides                 Ride[]
  documents             VerificationDocument[]
  
  @@map("vehicles")
}

model Ride {
  id                    String      @id @default(uuid())
  publisherId           String      @map("publisher_id")
  publisher             User        @relation("PublishedRides", fields: [publisherId], references: [id])
  vehicleId             String      @map("vehicle_id")
  vehicle               Vehicle     @relation(fields: [vehicleId], references: [id])
  
  // Route
  fromCity              String      @map("from_city")
  fromAddress           String?     @map("from_address")
  fromLatitude          Decimal?    @map("from_latitude") @db.Decimal(10,8)
  fromLongitude         Decimal?    @map("from_longitude") @db.Decimal(11,8)
  toCity                String      @map("to_city")
  toAddress             String?     @map("to_address")
  toLatitude            Decimal?    @map("to_latitude") @db.Decimal(10,8)
  toLongitude           Decimal?    @map("to_longitude") @db.Decimal(11,8)
  
  // Schedule
  departureDate         DateTime    @map("departure_date") @db.Date
  departureTime         DateTime    @map("departure_time") @db.Time
  estimatedArrivalTime  DateTime?   @map("estimated_arrival_time") @db.Time
  actualDepartureTime   DateTime?   @map("actual_departure_time")
  actualArrivalTime     DateTime?   @map("actual_arrival_time")
  
  // Pricing
  pricePerSeat          Decimal     @map("price_per_seat") @db.Decimal(10,2)
  currency              String      @default("INR")
  totalSeats            Int         @map("total_seats")
  availableSeats        Int         @map("available_seats")
  
  // Details
  rideType              RideType    @map("ride_type")
  distanceKm            Decimal?    @map("distance_km") @db.Decimal(10,2)
  durationMinutes       Int?        @map("duration_minutes")
  status                RideStatus  @default(scheduled)
  
  // Preferences
  allowsSmoking         Boolean     @default(false) @map("allows_smoking")
  allowsPets            Boolean     @default(true) @map("allows_pets")
  allowsMusic           Boolean     @default(true) @map("allows_music")
  chattiness            String      @default("moderate")
  
  // Additional
  description           String?
  specialInstructions   String?     @map("special_instructions")
  luggageSpace          String?     @map("luggage_space")
  wifiAvailable         Boolean     @default(false) @map("wifi_available")
  acAvailable           Boolean     @default(true) @map("ac_available")
  
  // Stats
  bookingCount          Int         @default(0) @map("booking_count")
  confirmedBookings     Int         @default(0) @map("confirmed_bookings")
  cancelledBookings     Int         @default(0) @map("cancelled_bookings")
  
  // Timestamps
  createdAt             DateTime    @default(now()) @map("created_at")
  updatedAt             DateTime    @updatedAt @map("updated_at")
  publishedAt           DateTime?   @map("published_at")
  cancelledAt           DateTime?   @map("cancelled_at")
  cancellationReason    String?     @map("cancellation_reason")
  
  // Relations
  bookings              Booking[]
  reviews               Review[]
  notifications         Notification[]
  conversations         Conversation[]
  
  @@map("rides")
}

model Booking {
  id                  String          @id @default(uuid())
  rideId              String          @map("ride_id")
  ride                Ride            @relation(fields: [rideId], references: [id])
  passengerId         String          @map("passenger_id")
  passenger           User            @relation(fields: [passengerId], references: [id])
  
  // Booking Details
  seatsBooked         Int             @map("seats_booked")
  totalPrice          Decimal         @map("total_price") @db.Decimal(10,2)
  currency            String          @default("INR")
  
  // Pickup & Drop
  pickupLocation      String?         @map("pickup_location")
  pickupLatitude      Decimal?        @map("pickup_latitude") @db.Decimal(10,8)
  pickupLongitude     Decimal?        @map("pickup_longitude") @db.Decimal(11,8)
  dropoffLocation     String?         @map("dropoff_location")
  dropoffLatitude     Decimal?        @map("dropoff_latitude") @db.Decimal(10,8)
  dropoffLongitude    Decimal?        @map("dropoff_longitude") @db.Decimal(11,8)
  
  // Status
  bookingStatus       BookingStatus   @default(pending) @map("booking_status")
  paymentStatus       PaymentStatus   @default(pending) @map("payment_status")
  
  // Special Requests
  specialRequests     String?         @map("special_requests")
  luggageCount        Int             @default(0) @map("luggage_count")
  
  // Confirmation
  confirmationCode    String?         @unique @map("confirmation_code")
  qrCodeUrl           String?         @map("qr_code_url")
  
  // Cancellation
  cancelledAt         DateTime?       @map("cancelled_at")
  cancelledBy         String?         @map("cancelled_by")
  cancellationReason  String?         @map("cancellation_reason")
  refundAmount        Decimal?        @map("refund_amount") @db.Decimal(10,2)
  
  // Timestamps
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @updatedAt @map("updated_at")
  confirmedAt         DateTime?       @map("confirmed_at")
  completedAt         DateTime?       @map("completed_at")
  
  // Relations
  transactions        Transaction[]
  reviews             Review[]
  notifications       Notification[]
  conversations       Conversation[]
  
  @@map("bookings")
}

model Transaction {
  id                    String              @id @default(uuid())
  bookingId             String?             @map("booking_id")
  booking               Booking?            @relation(fields: [bookingId], references: [id])
  
  // Parties
  fromUserId            String?             @map("from_user_id")
  fromUser              User?               @relation("TransactionsFrom", fields: [fromUserId], references: [id])
  toUserId              String?             @map("to_user_id")
  toUser                User?               @relation("TransactionsTo", fields: [toUserId], references: [id])
  
  // Transaction Details
  transactionType       TransactionType     @map("transaction_type")
  amount                Decimal             @db.Decimal(10,2)
  currency              String              @default("INR")
  status                TransactionStatus   @default(pending)
  
  // Payment Method
  paymentMethod         String?             @map("payment_method")
  paymentProvider       String?             @map("payment_provider")
  providerTransactionId String?             @map("provider_transaction_id")
  
  // Fees
  platformFee           Decimal             @default(0) @db.Decimal(10,2) @map("platform_fee")
  processingFee         Decimal             @default(0) @db.Decimal(10,2) @map("processing_fee")
  netAmount             Decimal?            @db.Decimal(10,2) @map("net_amount")
  
  // Metadata
  description           String?
  metadata              Json?
  
  // Timestamps
  createdAt             DateTime            @default(now()) @map("created_at")
  completedAt           DateTime?           @map("completed_at")
  failedAt              DateTime?           @map("failed_at")
  failureReason         String?             @map("failure_reason")
  
  @@map("transactions")
}

model Review {
  id                  String      @id @default(uuid())
  rideId              String      @map("ride_id")
  ride                Ride        @relation(fields: [rideId], references: [id])
  bookingId           String?     @map("booking_id")
  booking             Booking?    @relation(fields: [bookingId], references: [id])
  
  // Parties
  fromUserId          String      @map("from_user_id")
  fromUser            User        @relation("ReviewsGiven", fields: [fromUserId], references: [id])
  toUserId            String      @map("to_user_id")
  toUser              User        @relation("ReviewsReceived", fields: [toUserId], references: [id])
  
  // Review Details
  reviewType          ReviewType  @map("review_type")
  rating              Int
  comment             String?
  
  // Detailed Ratings
  punctualityRating   Int?        @map("punctuality_rating")
  cleanlinessRating   Int?        @map("cleanliness_rating")
  communicationRating Int?        @map("communication_rating")
  safetyRating        Int?        @map("safety_rating")
  
  // Moderation
  isVisible           Boolean     @default(true) @map("is_visible")
  isFlagged           Boolean     @default(false) @map("is_flagged")
  flagReason          String?     @map("flag_reason")
  moderatedBy         String?     @map("moderated_by")
  moderatedAt         DateTime?   @map("moderated_at")
  
  // Response
  response            String?
  responseAt          DateTime?   @map("response_at")
  
  // Timestamps
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  
  @@unique([rideId, fromUserId, toUserId])
  @@map("reviews")
}

model VerificationDocument {
  id              String          @id @default(uuid())
  userId          String?         @map("user_id")
  user            User?           @relation(fields: [userId], references: [id])
  vehicleId       String?         @map("vehicle_id")
  vehicle         Vehicle?        @relation(fields: [vehicleId], references: [id])
  
  // Document Details
  documentType    DocumentType    @map("document_type")
  documentNumber  String?         @map("document_number")
  documentUrl     String          @map("document_url")
  documentBackUrl String?         @map("document_back_url")
  
  // Verification
  status          DocumentStatus  @default(pending)
  verifiedBy      String?         @map("verified_by")
  verifiedAt      DateTime?       @map("verified_at")
  rejectionReason String?         @map("rejection_reason")
  
  // Expiry
  expiryDate      DateTime?       @map("expiry_date") @db.Date
  
  // Timestamps
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  
  @@map("verification_documents")
}

model Notification {
  id              String                @id @default(uuid())
  userId          String                @map("user_id")
  user            User                  @relation(fields: [userId], references: [id])
  
  // Notification Details
  type            NotificationType
  priority        NotificationPriority  @default(medium)
  title           String
  message         String
  
  // Action
  actionUrl       String?               @map("action_url")
  actionLabel     String?               @map("action_label")
  
  // Related Entities
  relatedRideId   String?               @map("related_ride_id")
  relatedRide     Ride?                 @relation(fields: [relatedRideId], references: [id])
  relatedBookingId String?              @map("related_booking_id")
  relatedBooking  Booking?              @relation(fields: [relatedBookingId], references: [id])
  relatedUserId   String?               @map("related_user_id")
  
  // Status
  isRead          Boolean               @default(false) @map("is_read")
  readAt          DateTime?             @map("read_at")
  isSent          Boolean               @default(false) @map("is_sent")
  sentAt          DateTime?             @map("sent_at")
  
  // Delivery Channels
  pushSent        Boolean               @default(false) @map("push_sent")
  emailSent       Boolean               @default(false) @map("email_sent")
  smsSent         Boolean               @default(false) @map("sms_sent")
  
  // Timestamps
  createdAt       DateTime              @default(now()) @map("created_at")
  expiresAt       DateTime?             @map("expires_at")
  
  @@map("notifications")
}

model Conversation {
  id              String    @id @default(uuid())
  rideId          String?   @map("ride_id")
  ride            Ride?     @relation(fields: [rideId], references: [id])
  bookingId       String?   @map("booking_id")
  booking         Booking?  @relation(fields: [bookingId], references: [id])
  
  // Participants
  participant1Id  String    @map("participant1_id")
  participant1    User      @relation("Participant1", fields: [participant1Id], references: [id])
  participant2Id  String    @map("participant2_id")
  participant2    User      @relation("Participant2", fields: [participant2Id], references: [id])
  
  // Status
  isActive        Boolean   @default(true) @map("is_active")
  lastMessageAt   DateTime? @map("last_message_at")
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  
  // Relations
  messages        Message[]
  
  @@unique([rideId, participant1Id, participant2Id])
  @@map("conversations")
}

model Message {
  id              String        @id @default(uuid())
  conversationId  String        @map("conversation_id")
  conversation    Conversation  @relation(fields: [conversationId], references: [id])
  senderId        String        @map("sender_id")
  sender          User          @relation(fields: [senderId], references: [id])
  
  // Message Content
  message         String
  attachmentUrl   String?       @map("attachment_url")
  attachmentType  String?       @map("attachment_type")
  
  // Status
  isRead          Boolean       @default(false) @map("is_read")
  readAt          DateTime?     @map("read_at")
  isDeleted       Boolean       @default(false) @map("is_deleted")
  
  // Timestamps
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  
  @@map("messages")
}

model FavoriteRoute {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])
  fromCity    String    @map("from_city")
  toCity      String    @map("to_city")
  nickname    String?
  createdAt   DateTime  @default(now()) @map("created_at")
  
  @@unique([userId, fromCity, toCity])
  @@map("favorite_routes")
}

model BlockedUser {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  user            User      @relation("BlockingUser", fields: [userId], references: [id])
  blockedUserId   String    @map("blocked_user_id")
  blockedUser     User      @relation("BlockedUser", fields: [blockedUserId], references: [id])
  reason          String?
  createdAt       DateTime  @default(now()) @map("created_at")
  
  @@unique([userId, blockedUserId])
  @@map("blocked_users")
}

model AuditLog {
  id          String    @id @default(uuid())
  userId      String?   @map("user_id")
  user        User?     @relation(fields: [userId], references: [id])
  adminId     String?   @map("admin_id")
  admin       Admin?    @relation(fields: [adminId], references: [id])
  entityType  String    @map("entity_type")
  entityId    String?   @map("entity_id")
  action      String
  oldValues   Json?     @map("old_values")
  newValues   Json?     @map("new_values")
  ipAddress   String?   @map("ip_address")
  userAgent   String?   @map("user_agent")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  @@map("audit_logs")
}

model Admin {
  id                String        @id @default(uuid())
  email             String        @unique
  passwordHash      String        @map("password_hash")
  name              String
  role              AdminRole
  status            AdminStatus   @default(active)
  avatarUrl         String?       @map("avatar_url")
  phone             String?
  
  // Permissions
  permissions       Json?         // Stores custom permissions array
  
  // Last Activity
  lastLoginAt       DateTime?     @map("last_login_at")
  lastLoginIp       String?       @map("last_login_ip")
  
  // Security
  twoFactorEnabled  Boolean       @default(false) @map("two_factor_enabled")
  twoFactorSecret   String?       @map("two_factor_secret")
  
  // Timestamps
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  createdBy         String?       @map("created_by")
  
  // Relations
  auditLogs         AuditLog[]
  supportTickets    SupportTicket[]
  
  @@map("admins")
}

model SupportTicket {
  id              String    @id @default(uuid())
  ticketNumber    String    @unique @map("ticket_number")
  userId          String    @map("user_id")
  
  // Ticket Details
  subject         String
  description     String
  category        String    // 'verification', 'payment', 'ride_issue', 'account', 'other'
  priority        String    @default("medium") // 'low', 'medium', 'high', 'urgent'
  status          String    @default("open") // 'open', 'in_progress', 'resolved', 'closed'
  
  // Assignment
  assignedToId    String?   @map("assigned_to_id")
  assignedTo      Admin?    @relation(fields: [assignedToId], references: [id])
  assignedAt      DateTime? @map("assigned_at")
  
  // Resolution
  resolution      String?
  resolvedAt      DateTime? @map("resolved_at")
  closedAt        DateTime? @map("closed_at")
  
  // Related Entities
  relatedRideId   String?   @map("related_ride_id")
  relatedBookingId String?  @map("related_booking_id")
  
  // Attachments
  attachments     Json?     // Array of attachment URLs
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  @@map("support_tickets")
}

enum FareCalculationType {
  fixed
  per_km
  per_minute
  per_km_plus_time
}

enum DayOfWeek {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum FareRuleStatus {
  active
  inactive
  scheduled
}

model FarePricing {
  id                    String                @id @default(uuid())
  
  // Basic Info
  name                  String
  description           String?
  calculationType       FareCalculationType   @default(per_km_plus_time) @map("calculation_type")
  
  // Vehicle Type Specific
  vehicleType           String?               @map("vehicle_type")
  
  // Base Pricing
  baseFare              Decimal               @default(0) @db.Decimal(10,2) @map("base_fare")
  minimumFare           Decimal               @default(0) @db.Decimal(10,2) @map("minimum_fare")
  
  // Distance-based
  pricePerKm            Decimal?              @db.Decimal(10,2) @map("price_per_km")
  freeKm                Decimal?              @db.Decimal(5,2) @map("free_km")
  
  // Time-based
  pricePerMinute        Decimal?              @db.Decimal(10,2) @map("price_per_minute")
  freeMinutes           Int?                  @map("free_minutes")
  
  // Booking Fee
  bookingFee            Decimal               @default(0) @db.Decimal(10,2) @map("booking_fee")
  bookingFeePercentage  Decimal               @default(0) @db.Decimal(5,2) @map("booking_fee_percentage")
  
  // Platform Fee
  platformFee           Decimal               @default(0) @db.Decimal(10,2) @map("platform_fee")
  platformFeePercentage Decimal               @default(0) @db.Decimal(5,2) @map("platform_fee_percentage")
  
  // Surge/Dynamic Pricing
  surgeMultiplier       Decimal               @default(1.00) @db.Decimal(5,2) @map("surge_multiplier")
  surgeEnabled          Boolean               @default(false) @map("surge_enabled")
  
  // Geographic Constraints
  applicableCities      String[]              @map("applicable_cities")
  applicableStates      String[]              @map("applicable_states")
  
  // Time Constraints
  validFromDate         DateTime?             @map("valid_from_date") @db.Date
  validToDate           DateTime?             @map("valid_to_date") @db.Date
  validFromTime         DateTime?             @map("valid_from_time") @db.Time
  validToTime           DateTime?             @map("valid_to_time") @db.Time
  validDaysOfWeek       DayOfWeek[]           @map("valid_days_of_week")
  
  // Status & Priority
  status                FareRuleStatus        @default(active)
  priority              Int                   @default(0)
  
  // Metadata
  notes                 String?
  createdBy             String?               @map("created_by")
  updatedBy             String?               @map("updated_by")
  
  // Timestamps
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")
  
  // Relations
  fareCalculations      FareCalculation[]
  
  @@map("fare_pricing")
}

model FareSpecialRule {
  id                    String            @id @default(uuid())
  
  // Rule Info
  name                  String
  description           String?
  ruleType              String            @map("rule_type")
  
  // Pricing Adjustments
  discountPercentage    Decimal           @default(0) @db.Decimal(5,2) @map("discount_percentage")
  discountAmount        Decimal           @default(0) @db.Decimal(10,2) @map("discount_amount")
  surgeMultiplier       Decimal           @default(1.00) @db.Decimal(5,2) @map("surge_multiplier")
  
  // Conditions
  applicableCities      String[]          @map("applicable_cities")
  applicableVehicleTypes String[]         @map("applicable_vehicle_types")
  minDistanceKm         Decimal?          @db.Decimal(10,2) @map("min_distance_km")
  maxDistanceKm         Decimal?          @db.Decimal(10,2) @map("max_distance_km")
  
  // Validity
  validFrom             DateTime          @map("valid_from")
  validTo               DateTime          @map("valid_to")
  
  // Status
  status                FareRuleStatus    @default(active)
  priority              Int               @default(0)
  
  // Usage Limits
  maxUsesPerUser        Int?              @map("max_uses_per_user")
  totalMaxUses          Int?              @map("total_max_uses")
  currentUses           Int               @default(0) @map("current_uses")
  
  // Promo Code
  promoCode             String?           @unique @map("promo_code")
  
  // Metadata
  createdBy             String?           @map("created_by")
  
  // Timestamps
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")
  
  @@map("fare_special_rules")
}

model FareCalculation {
  id                    String          @id @default(uuid())
  rideId                String?         @map("ride_id")
  bookingId             String?         @map("booking_id")
  
  // Applied Rules
  baseFareRuleId        String?         @map("base_fare_rule_id")
  baseFareRule          FarePricing?    @relation(fields: [baseFareRuleId], references: [id])
  specialRulesApplied   Json?           @map("special_rules_applied")
  
  // Calculation Breakdown
  baseFare              Decimal         @db.Decimal(10,2) @map("base_fare")
  distanceFare          Decimal         @default(0) @db.Decimal(10,2) @map("distance_fare")
  timeFare              Decimal         @default(0) @db.Decimal(10,2) @map("time_fare")
  bookingFee            Decimal         @default(0) @db.Decimal(10,2) @map("booking_fee")
  platformFee           Decimal         @default(0) @db.Decimal(10,2) @map("platform_fee")
  surgeAmount           Decimal         @default(0) @db.Decimal(10,2) @map("surge_amount")
  discountAmount        Decimal         @default(0) @db.Decimal(10,2) @map("discount_amount")
  totalFare             Decimal         @db.Decimal(10,2) @map("total_fare")
  
  // Trip Details
  distanceKm            Decimal?        @db.Decimal(10,2) @map("distance_km")
  durationMinutes       Int?            @map("duration_minutes")
  vehicleType           String?         @map("vehicle_type")
  
  // Applied Multipliers
  surgeMultiplier       Decimal         @default(1.00) @db.Decimal(5,2) @map("surge_multiplier")
  
  // Timestamps
  calculatedAt          DateTime        @default(now()) @map("calculated_at")
  
  @@map("fare_calculations")
}

